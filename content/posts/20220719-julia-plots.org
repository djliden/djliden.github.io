#+TITLE: Basic Plotting in Julia
#+DATE: <2022-07-19 Tue>

#+begin_preview
In this short post, I show one of the many ways of using Julia within emacs
org mode, and will describe some of the basic plotting functionality in Julia.
#+end_preview

* Getting Started with Julia in Org Mode: ~jupyter-julia~.

While [[https://github.com/gcv/julia-snail][julia-snail]] is my favorite Julia development environment, it's support for
org-mode is, at present, quite limited. For example, it seems to ignore the
~:file~ argument, making it difficult to save figures to specific locations. I
find that [[https://github.com/nnicandro/emacs-jupyter][emacs-jupyter]] provides the most featureful and reliable way to work
with Julia in org-mode. Read [[https://github.com/nnicandro/emacs-jupyter#org-mode-source-blocks][the emacs-jupyter documentation]] for instructions on
how to use emacs-jupyter with org-mode.

* Making some Plots

Let's make some plots. We'll use the [[https://docs.juliaplots.org/latest/tutorial/][Plots.jl]] package and explore a few
different plotting styles. First, we load the packages we'll be using. I tend to
plot statistical distributions fairly often, so I'll load ~Distributions~ and
~Statplots~ in addition to ~Plots~.

#+begin_src jupyter-julia :session julia-plots :async yes
using Plots
using Distributions
using StatsPlots
#+end_src

#+RESULTS:

** Building Plots Incrementally

With these packages loaded, we'll start simply and plot a standard normal
distribution.

#+begin_src jupyter-julia :session julia-plots :file figures/20220719-julia-plots/fig1.svg :async yes
plot(Normal(), fill=(0,0.5,:red))
#+end_src

#+RESULTS:
#+CAPTION: A basic plot
[[file:figures/20220719-julia-plots/fig1.svg]]

The ~Plots.jl~ package makes it easy to update plots after creation. A Julia
convention is that methods ending in ~!~ [[https://docs.julialang.org/en/v1/manual/style-guide/#bang-convention][modify their arguments in place]]. In this
case, we can call ~plot!()~ to incrementally add to our plot.

#+begin_src jupyter-julia :session julia-plots :file figures/20220719-julia-plots/fig2.svg :async yes
plot!(title="Standard Normal Distribution", xlabel="x", ylabel="p(x)") # Add Labels
plot!(leg=false) # Remove the Legend
#+end_src

#+RESULTS:
#+CAPTION: Removing the legend and adding labels
[[file:figures/20220719-julia-plots/fig2.svg]]

Let's make one final set of changes and update some of the font sizes for better
readability.


#+begin_src jupyter-julia :session julia-plots :file figures/20220719-julia-plots/fig3.svg :async yes
plot!(tickfont=font(18, "courier"),
      guidefont=font(18),
      titlefont=
font(18, "Computer Modern"))
#+end_src

#+RESULTS:
#+CAPTION: Changing some Fonts
[[file:figures/20220719-julia-plots/fig3.svg]]


* Plotting Real Data

That's enough of that. Usually we're plotting real data, not standard standard
distributions. Let's get some. First we'll pull from the ~RDatasets~ package,
which is an excellent source of go-to data science and statistics examples such
as ~mtcars~ and ~iris~. We'll use the venerable ~mtcars~ to show how to work with data
in a basic way.

#+begin_src jupyter-julia :session julia-plots :async yes
using RDatasets, DataFrames
mtcars = dataset("datasets", "mtcars")
show(DataFrame(mtcars))
#+end_src

#+RESULTS:
#+begin_example
[1m32Ã—12 DataFrame[0m
[1m Row [0mâ”‚[1m Model             [0m[1m MPG     [0m[1m Cyl   [0m[1m Disp    [0m[1m HP    [0m[1m DRat    [0m[1m WT      [0m[1m QS[0m â‹¯
[1m     [0mâ”‚[90m String31          [0m[90m Float64 [0m[90m Int64 [0m[90m Float64 [0m[90m Int64 [0m[90m Float64 [0m[90m Float64 [0m[90m Fl[0m â‹¯
â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
   1 â”‚ Mazda RX4             21.0      6    160.0    110     3.9     2.62      â‹¯
   2 â”‚ Mazda RX4 Wag         21.0      6    160.0    110     3.9     2.875
   3 â”‚ Datsun 710            22.8      4    108.0     93     3.85    2.32
   4 â”‚ Hornet 4 Drive        21.4      6    258.0    110     3.08    3.215
   5 â”‚ Hornet Sportabout     18.7      8    360.0    175     3.15    3.44      â‹¯
   6 â”‚ Valiant               18.1      6    225.0    105     2.76    3.46
   7 â”‚ Duster 360            14.3      8    360.0    245     3.21    3.57
   8 â”‚ Merc 240D             24.4      4    146.7     62     3.69    3.19
   9 â”‚ Merc 230              22.8      4    140.8     95     3.92    3.15      â‹¯
  10 â”‚ Merc 280              19.2      6    167.6    123     3.92    3.44
  11 â”‚ Merc 280C             17.8      6    167.6    123     3.92    3.44
  â‹®  â”‚         â‹®             â‹®       â‹®       â‹®       â‹®       â‹®        â‹®        â‹±
  23 â”‚ AMC Javelin           15.2      8    304.0    150     3.15    3.435
  24 â”‚ Camaro Z28            13.3      8    350.0    245     3.73    3.84      â‹¯
  25 â”‚ Pontiac Firebird      19.2      8    400.0    175     3.08    3.845
  26 â”‚ Fiat X1-9             27.3      4     79.0     66     4.08    1.935
  27 â”‚ Porsche 914-2         26.0      4    120.3     91     4.43    2.14
  28 â”‚ Lotus Europa          30.4      4     95.1    113     3.77    1.513     â‹¯
  29 â”‚ Ford Pantera L        15.8      8    351.0    264     4.22    3.17
  30 â”‚ Ferrari Dino          19.7      6    145.0    175     3.62    2.77
  31 â”‚ Maserati Bora         15.0      8    301.0    335     3.54    3.57
  32 â”‚ Volvo 142E            21.4      4    121.0    109     4.11    2.78      â‹¯
[36m                                                   5 columns and 11 rows omitted[0m
#+end_example


We can use the ~@df~ macro and access columns by prepending them with ~:~.


#+begin_src jupyter-julia :session julia-plots :results file :file figures/20220719-julia-plots/fig4.svg :async yes :exports both
gr()
@df mtcars scatter(:MPG, :HP, group=:Cyl, background=:black, msize=8, keytitle="N Cylinders")
xlabel!("Mpg")
ylabel!("HP")
title!("Horsepower by MPG and N Cylinders")
#+end_src

#+RESULTS:
#+CAPTION: plotting data with Plots.jl
[[file:figures/20220719-julia-plots/fig4.svg]]

* Modifying Plot Visual Components
It's not always straightforward to figure out how to modify visual components of
a plot. Most of the relevant information lies in the [[https://docs.juliaplots.org/latest/attributes/][Attributes]] section of the
Plots.jl documentation (and its subsections).
* Different Plot Styles
One of the benefits of the Plots.jl package is its support for many different
[[https://docs.juliaplots.org/latest/backends/][plotting backends]]. The default is [[https://docs.juliaplots.org/latest/backends/#\[GR\](https://github.com/jheinen/GR.jl)][GR]] which, according to the documentation, is

#+begin_quote
The default backend. Very fast with lots of plot types. Still actively developed and improving daily.
#+end_quote

and it offers speed; 2D and 3D plots, and standalone or inline plotting.

Here we'll repeat the plot above with the UnicodePlots backend. We first need to
install the package with ~add UnicodePlots~ in the package manager. Note that you
can do this right from the Jupyter repl in emacs-jupyter by pressing ~]~ in the
repl.

We then specify that we'd like to use this backend with the ~unicodeplots()~ function.

#+begin_src jupyter-julia :session julia-plots :async yes
unicodeplots()
# scatterplot
@df mtcars scatter(:MPG, :HP, title="HP vs MPG", xlabel="Mpg", ylabel="HP")
#+end_src

#+RESULTS:
#+begin_example
                           HP vs MPG                   
          +----------------------------------------+   
   343.49 |        âš¬                               | y1
          |                                        |   
          |                                        |   
          |         âš¬                              |   
          |     âš¬ âš¬                                |   
          |        âš¬                               |   
          | âš¬                                      |   
       HP |                                        |   
          |        âš¬ âš¬ âš¬ âš¬âš¬âš¬                       |   
          |        âš¬âš¬                              |   
          |                                        |   
          |             âš¬ âš¬  âš¬              âš¬      |   
          |                  âš¬  âš¬    âš¬             |   
          |                            âš¬       âš¬ âš¬ |   
    43.51 |                       âš¬         âš¬      |   
          +----------------------------------------+   
           9.695             Mpg             34.605    
#+end_example

I haven't yet figured out how to get the colors to appear as they are supposed
to in org mode, so for now, I'm simply showing a basic scatterplot with no grouping. I'll
update if and when I figure that out. It should look like this:

#+attr_html: :width 600px
#+caption: screenshot of unicodeplot from vterm
[[file:figures/20220719-julia-plots/fig5.png]]


* Conculsion

There's a lot more to get into with plotting in Julia and with using Julia in
emacs. This post serves as a small jumping-off pointâ€”just enough to get started,
with a few pointers to further resources, and some questions to start
pursuing. I'll write more on this topic as I learn more!
