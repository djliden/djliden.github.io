#+TITLE: Basic Plotting in Julia
#+DATE: <2022-07-19 Tue>

#+begin_preview
In this short post, I show one of the many ways of using Julia within emacs
org mode, and will describe some of the basic plotting functionality in Julia.
#+end_preview

* Getting Started with Julia in Org Mode: ~jupyter-julia~.

While [[https://github.com/gcv/julia-snail][julia-snail]] is my favorite Julia development environment, it's support for
org-mode is, at present, quite limited. For example, it seems to ignore the
~:file~ argument, making it difficult to save figures to specific locations. I
find that [[https://github.com/nnicandro/emacs-jupyter][emacs-jupyter]] provides the most featureful and reliable way to work
with Julia in org-mode. Read [[https://github.com/nnicandro/emacs-jupyter#org-mode-source-blocks][the emacs-jupyter documentation]] for instructions on
how to use emacs-jupyter with org-mode.

* Making some Plots

Let's make some plots. We'll use the [[https://docs.juliaplots.org/latest/tutorial/][Plots.jl]] package and explore a few
different plotting styles. First, we load the packages we'll be using. I tend to
plot statistical distributions fairly often, so I'll load ~Distributions~ and
~Statplots~ in addition to ~Plots~.

#+begin_src jupyter-julia :session julia-plots :async yes
using Plots
using Distributions
using StatsPlots
#+end_src

#+RESULTS:

** Building Plots Incrementally

With these packages loaded, we'll start simply and plot a standard normal
distribution.

#+begin_src jupyter-julia :session julia-plots :file figures/20220719-julia-plots/fig1.svg :async yes
plot(Normal(), fill=(0,0.5,:red))
#+end_src

#+RESULTS:
#+CAPTION: A basic plot
[[file:figures/20220719-julia-plots/fig1.svg]]

The ~Plots.jl~ package makes it easy to update plots after creation. A Julia
convention is that methods ending in ~!~ [[https://docs.julialang.org/en/v1/manual/style-guide/#bang-convention][modify their arguments in place]]. In this
case, we can call ~plot!()~ to incrementally add to our plot.

#+begin_src jupyter-julia :session julia-plots :file figures/20220719-julia-plots/fig2.svg :async yes
plot!(title="Standard Normal Distribution", xlabel="x", ylabel="p(x)") # Add Labels
plot!(leg=false) # Remove the Legend
#+end_src

#+RESULTS:
#+CAPTION: Removing the legend and adding labels
[[file:figures/20220719-julia-plots/fig2.svg]]

Let's make one final set of changes and update some of the font sizes for better
readability.


#+begin_src jupyter-julia :session julia-plots :file figures/20220719-julia-plots/fig3.svg :async yes
plot!(tickfont=font(18, "courier"),
      guidefont=font(18),
      titlefont=
font(18, "Computer Modern"))
#+end_src

#+RESULTS:
#+CAPTION: Changing some Fonts
[[file:figures/20220719-julia-plots/fig3.svg]]


* Plotting Real Data

That's enough of that. Usually we're plotting real data, not standard standard
distributions. Let's get some. First we'll pull from the ~RDatasets~ package,
which is an excellent source of go-to data science and statistics examples such
as ~mtcars~ and ~iris~. We'll use the venerable ~mtcars~ to show how to work with data
in a basic way.

#+begin_src jupyter-julia :session julia-plots :async yes
using RDatasets, DataFrames
mtcars = dataset("datasets", "mtcars")
mtcars[1:10,:]
#+end_src

#+RESULTS:
#+begin_export html
<div class="data-frame"><p>10 rows × 12 columns (omitted printing of 3 columns)</p><table class="data-frame"><thead><tr><th></th><th>Model</th><th>MPG</th><th>Cyl</th><th>Disp</th><th>HP</th><th>DRat</th><th>WT</th><th>QSec</th><th>VS</th></tr><tr><th></th><th title="InlineStrings.String31">String31</th><th title="Float64">Float64</th><th title="Int64">Int64</th><th title="Float64">Float64</th><th title="Int64">Int64</th><th title="Float64">Float64</th><th title="Float64">Float64</th><th title="Float64">Float64</th><th title="Int64">Int64</th></tr></thead><tbody><tr><th>1</th><td>Mazda RX4</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.62</td><td>16.46</td><td>0</td></tr><tr><th>2</th><td>Mazda RX4 Wag</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.875</td><td>17.02</td><td>0</td></tr><tr><th>3</th><td>Datsun 710</td><td>22.8</td><td>4</td><td>108.0</td><td>93</td><td>3.85</td><td>2.32</td><td>18.61</td><td>1</td></tr><tr><th>4</th><td>Hornet 4 Drive</td><td>21.4</td><td>6</td><td>258.0</td><td>110</td><td>3.08</td><td>3.215</td><td>19.44</td><td>1</td></tr><tr><th>5</th><td>Hornet Sportabout</td><td>18.7</td><td>8</td><td>360.0</td><td>175</td><td>3.15</td><td>3.44</td><td>17.02</td><td>0</td></tr><tr><th>6</th><td>Valiant</td><td>18.1</td><td>6</td><td>225.0</td><td>105</td><td>2.76</td><td>3.46</td><td>20.22</td><td>1</td></tr><tr><th>7</th><td>Duster 360</td><td>14.3</td><td>8</td><td>360.0</td><td>245</td><td>3.21</td><td>3.57</td><td>15.84</td><td>0</td></tr><tr><th>8</th><td>Merc 240D</td><td>24.4</td><td>4</td><td>146.7</td><td>62</td><td>3.69</td><td>3.19</td><td>20.0</td><td>1</td></tr><tr><th>9</th><td>Merc 230</td><td>22.8</td><td>4</td><td>140.8</td><td>95</td><td>3.92</td><td>3.15</td><td>22.9</td><td>1</td></tr><tr><th>10</th><td>Merc 280</td><td>19.2</td><td>6</td><td>167.6</td><td>123</td><td>3.92</td><td>3.44</td><td>18.3</td><td>1</td></tr></tbody></table></div>
#+end_export


We can use the ~@df~ macro and access columns by prepending them with ~:~.


#+begin_src jupyter-julia :session julia-plots :results file :file figures/20220719-julia-plots/fig4.svg :async yes :exports both
gr()
@df mtcars scatter(:MPG, :HP, group=:Cyl, background=:black, msize=8, keytitle="N Cylinders")
xlabel!("Mpg")
ylabel!("HP")
title!("Horsepower by MPG and N Cylinders")
#+end_src

#+RESULTS:
#+CAPTION: plotting data with Plots.jl
[[file:figures/20220719-julia-plots/fig4.svg]]

* Modifying Plot Visual Components
It's not always straightforward to figure out how to modify visual components of
a plot. Most of the relevant information lies in the [[https://docs.juliaplots.org/latest/attributes/][Attributes]] section of the
Plots.jl documentation (and its subsections).
* Different Plot Styles
One of the benefits of the Plots.jl package is its support for many different
[[https://docs.juliaplots.org/latest/backends/][plotting backends]]. The default is GR which, according to the documentation, is

#+begin_quote
The default backend. Very fast with lots of plot types. Still actively developed and improving daily.
#+end_quote

and it offers speed; 2D and 3D plots, and standalone or inline plotting.

Here we'll repeat the plot above with the UnicodePlots backend. We first need to
install the package with ~add UnicodePlots~ in the package manager. Note that you
can do this right from the Jupyter repl in emacs-jupyter by pressing ~]~ in the
repl.

We then specify that we'd like to use this backend with the ~unicodeplots()~ function.

#+begin_src jupyter-julia :session julia-plots :async yes
unicodeplots()
# scatterplot
@df mtcars scatter(:MPG, :HP, title="HP vs MPG", xlabel="Mpg", ylabel="HP")
#+end_src

#+RESULTS:
#+begin_example
                           HP vs MPG                   
          +----------------------------------------+   
   343.49 |        ⚬                               | y1
          |                                        |   
          |                                        |   
          |         ⚬                              |   
          |     ⚬ ⚬                                |   
          |        ⚬                               |   
          | ⚬                                      |   
       HP |                                        |   
          |        ⚬ ⚬ ⚬ ⚬⚬⚬                       |   
          |        ⚬⚬                              |   
          |                                        |   
          |             ⚬ ⚬  ⚬              ⚬      |   
          |                  ⚬  ⚬    ⚬             |   
          |                            ⚬       ⚬ ⚬ |   
    43.51 |                       ⚬         ⚬      |   
          +----------------------------------------+   
           9.695             Mpg             34.605    
#+end_example

I haven't yet figured out how to get the colors to appear as they are supposed
to in org mode, so for now, I'm simply showing a basic scatterplot with no grouping. I'll
update if and when I figure that out. It should look like this:

#+attr_html: :width 600px
#+caption: screenshot of unicodeplot from vterm
[[file:figures/20220719-julia-plots/fig5.png]]


* Conculsion

There's a lot more to get into with plotting in Julia and with using Julia in
emacs. This post serves as a small jumping-off point—just enough to get started,
with a few pointers to further resources, and some questions to start
pursuing. I'll write more on this topic as I learn more!
